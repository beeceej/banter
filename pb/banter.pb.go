// Code generated by protoc-gen-go. DO NOT EDIT.
// source: banter.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	banter.proto

It has these top-level messages:
	Address
	Response
	Peer
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_OK    Status = 0
	Status_ERROR Status = 1
)

var Status_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var Status_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Response struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=banter.Status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

type Peer struct {
	PeerId    string `protobuf:"bytes,1,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Peer) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "banter.Address")
	proto.RegisterType((*Response)(nil), "banter.Response")
	proto.RegisterType((*Peer)(nil), "banter.Peer")
	proto.RegisterEnum("banter.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Banter service

type BanterClient interface {
	Ping(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
}

type banterClient struct {
	cc *grpc.ClientConn
}

func NewBanterClient(cc *grpc.ClientConn) BanterClient {
	return &banterClient{cc}
}

func (c *banterClient) Ping(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/banter.banter/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Banter service

type BanterServer interface {
	Ping(context.Context, *Address) (*Response, error)
}

func RegisterBanterServer(s *grpc.Server, srv BanterServer) {
	s.RegisterService(&_Banter_serviceDesc, srv)
}

func _Banter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banter.banter/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanterServer).Ping(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Banter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "banter.banter",
	HandlerType: (*BanterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Banter_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banter.proto",
}

func init() { proto.RegisterFile("banter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x50, 0xbd, 0x4a, 0xc6, 0x30,
	0x14, 0xb5, 0x35, 0xa6, 0xf6, 0x22, 0x9f, 0xe5, 0x2e, 0x16, 0x45, 0x90, 0x0a, 0xa2, 0x0e, 0xdf,
	0xd0, 0x3e, 0x81, 0x82, 0x83, 0x38, 0xb4, 0xc4, 0xcd, 0xa5, 0xa4, 0xe4, 0x22, 0x19, 0x4c, 0x43,
	0x12, 0xdf, 0x5f, 0xcc, 0xcf, 0x76, 0x7e, 0x92, 0x93, 0x73, 0x02, 0x17, 0x9b, 0x34, 0x81, 0xdc,
	0xd1, 0xba, 0x3d, 0xec, 0xc8, 0x13, 0x1b, 0xee, 0xa1, 0x79, 0x51, 0xca, 0x91, 0xf7, 0xd8, 0x43,
	0x23, 0x13, 0xec, 0xab, 0xbb, 0xea, 0xb1, 0x15, 0x85, 0x0e, 0x23, 0x9c, 0x0b, 0xf2, 0x76, 0x37,
	0x9e, 0xf0, 0x01, 0xb8, 0x0f, 0x32, 0xfc, 0xa6, 0x43, 0x87, 0xf1, 0x70, 0xcc, 0xb9, 0x9f, 0x51,
	0x15, 0xd9, 0x1d, 0x04, 0xb0, 0x85, 0xc8, 0xe1, 0x15, 0x34, 0x96, 0xc8, 0xad, 0x5a, 0xe5, 0x54,
	0xfe, 0x4f, 0xdf, 0x15, 0x22, 0x30, 0x23, 0x7f, 0xa8, 0xaf, 0xa3, 0x1a, 0x31, 0xde, 0x02, 0x68,
	0xbb, 0x96, 0x16, 0xa7, 0xd1, 0x69, 0xb5, 0xcd, 0x0d, 0x9f, 0x6f, 0x80, 0xa7, 0x57, 0x90, 0x43,
	0x3d, 0x7f, 0x74, 0x27, 0xd8, 0xc2, 0xd9, 0x9b, 0x10, 0xb3, 0xe8, 0xaa, 0x71, 0x82, 0xbc, 0x09,
	0x9f, 0x80, 0x2d, 0xda, 0x7c, 0xe3, 0x65, 0xa9, 0x96, 0xef, 0x5f, 0x77, 0x45, 0x28, 0x6b, 0x5e,
	0xd9, 0x57, 0x6d, 0xb7, 0x8d, 0xc7, 0x3f, 0x99, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x14,
	0x18, 0x32, 0x23, 0x01, 0x00, 0x00,
}
